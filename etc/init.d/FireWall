#!/bin/bash
#
## 	binadit firewall installation script.
## 	This script must be run as root and be executable (chmod +x /etc/init.d/firewall)
##
## 	Just added IPv6 | june 2013
## 	DMZ IPv6 | sept 2013
## 	Blacklist ipv6 | nov 2013
## 	Added ips for SSH Access | feb 2014
## 	IP range dmz in- and output | mrt 2014
## 	IP range dmz fix voor IPv6 | may 2014
## 	ICMP types activated voor IPv4  | nov 2014
## 	Added multicast enable option | nov 2014
##  Added SSH port detection | jan 2015
##  Complete redesign of script | jan 2015
##
#
#chkconfig: 345 99 01

SSHPORT=`grep "Port " /etc/ssh/sshd_config | awk '{print $2}'`
IPTABLES=`which iptables`
IP6TABLES=`which ip6tables`
IPTABLESSAVE=`which iptables-save`
IP6TABLESSAVE=`which ip6tables-save`
SERVICE=`which service`
SSHACCESSnew=""
DMZSnew=""

if [ -f /usr/bin/lsb_release ]; then
	iptablesFile="/etc/iptables/rules.v4"
	ip6tablesFile="/etc/iptables/rules.v6"
	IPTABLESSERVICE="iptables-persistent"
	IP6TABLESSERVICE=""
	
	if [ ! -f $iptablesFile ]; then
		aptitude -y install iptables-persistent
	fi
fi

if [ -f /etc/redhat-release ]; then
	iptablesFile="/etc/sysconfig/iptables"
	ip6tablesFile="/etc/sysconfig/ip6tables"
	IPTABLESSERVICE="iptables"
	IP6TABLESSERVICE="ip6tables"
fi

# Load config file
source /etc/firewall.d/host.conf

function f_is_ip(){
	IP="`echo "$1" | /bin/egrep "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"`"
	if [ "$IP" != "" ]
	then
		firewallIP=$1
	else
		firewallIP=`dig +short $1 | awk '{print; exit}'`
	fi
}

function changeVariables() {
	for ip in $SSHACCESS; do
		f_is_ip $ip
  		SSHACCESSnew="$SSHACCESSnew $firewallIP"
  	done
  	for ip in $DMZS; do
		f_is_ip $ip
  		DMZSnew="$DMZSnew $firewallIP"
  	done
}

purge() {
	echo "Firewall: Purging and allowing all traffic"
		
	if [ -f /etc/redhat-release ]; then
		$SERVICE $IPTABLESSERVICE stop
		$SERVICE $IP6TABLESSERVICE stop
	else 
		$SERVICE $IPTABLESSERVICE flush
	fi
	
	echo "" > $iptablesFile
	echo "" > $ip6tablesFile
}

setup() {
	$SERVICE $IPTABLESSERVICE start
	#$SERVICE $IP6TABLES start
	echo "Firewall: Setup traffic filtering"
	
	changeVariables
	
	# Default actions
	$IPTABLES -P INPUT DROP
	$IPTABLES -P FORWARD DROP
	$IPTABLES -P OUTPUT DROP
	
	# Localhost
	$IPTABLES -A INPUT -i lo -j ACCEPT
	$IPTABLES -A OUTPUT -o lo -j ACCEPT
	
	# Default state
	$IPTABLES -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	$IPTABLES -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# Open DNS
	$IPTABLES -A OUTPUT -p udp --dport 53 -j ACCEPT
	$IPTABLES -A INPUT  -p udp --sport 53 -j ACCEPT
	$IPTABLES -A OUTPUT -p tcp --dport 53 -j ACCEPT
	$IPTABLES -A INPUT  -p tcp --sport 53 -j ACCEPT
	
	# SSH access to server
	for ip in $SSHACCESSnew; do
  		$IPTABLES -A INPUT -p tcp --sport $SSHPORT -s $ip -j ACCEPT
  		$IPTABLES -A OUTPUT -p tcp --dport $SSHPORT -s $ip -j ACCEPT
  	done
  
	for port in $TCPPORTS ; do
  		$IPTABLES -A INPUT -p tcp --sport $port -j ACCEPT
  		$IPTABLES -A OUTPUT -p tcp --dport $port -j ACCEPT
  	done
 
	for port in $UDPPORTS ; do
		$IPTABLES -A INPUT -p udp --sport $port -j ACCEPT
		$IPTABLES -A OUTPUT -p udp --dport $port -j ACCEPT
	done
	
	for ip in $DMZSnew ; do
		$IPTABLES -A INPUT -s $ip -j ACCEPT
		$IPTABLES -A OUTPUT -d $ip -j ACCEPT
	done
	
	for ip in $DMZRANGE ; do
		$IPTABLES -A INPUT -m iprange --src-range $ip -j ACCEPT
		$IPTABLES -A OUTPUT -m iprange --dst-range $ip -j ACCEPT
	done
	
	for ip in $BLACKLIST ; do
    	$IPTABLES -A INPUT -s $ip -j DROP
    	$IPTABLES -A OUTPUT -s $ip -j DROP
    done
  
	for ip in $BLOCKRANGE ; do
    	$IPTABLES -A INPUT -m iprange --src-range $ip -j DROP
		$IPTABLES -A OUTPUT -m iprange --src-range $ip -j DROP
	done
	
	# Multicast
	if [ "$MULTICAST_ENABLE" == "TRUE" ]; then
		$IPTABLES -A INPUT -m pkttype --pkt-type multicast -j ACCEPT
		$IPTABLES -A INPUT -m pkttype --pkt-type broadcast -j ACCEPT
		$IPTABLES -A OUTPUT -m pkttype --pkt-type multicast -j ACCEPT
		$IPTABLES -A OUTPUT -m pkttype --pkt-type broadcast -j ACCEPT
	fi
	
	# OPEN SMTP with spam protection
	$IPTABLES -A OUTPUT -d 127.0.0.1 -p tcp -m tcp --dport 25 -j ACCEPT
	$IPTABLES -A OUTPUT -p tcp -m tcp --dport 25 -m limit --limit 10/sec -m owner --gid-owner mail -j ACCEPT
	$IPTABLES -A OUTPUT -p tcp -m tcp --dport 25 -m limit --limit 10/sec -m owner --gid-owner postfix -j ACCEPT
	$IPTABLES -A OUTPUT -p tcp -m tcp --dport 25 -m limit --limit 10/sec -m owner --uid-owner root -j ACCEPT
	$IPTABLES -A OUTPUT -p tcp -m tcp --dport 25 -j REJECT --reject-with icmp-port-unreachable
	
	$IPTABLES -A INPUT -p icmp -m icmp --icmp-type host-unreachable -j ACCEPT
	$IPTABLES -A INPUT -p icmp -m icmp --icmp-type port-unreachable -j ACCEPT
	$IPTABLES -A INPUT -p icmp -m icmp --icmp-type fragmentation-needed -j ACCEPT
	$IPTABLES -A INPUT -p icmp -m icmp --icmp-type source-quench -j ACCEPT
	#$IPTABLES -A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
	#$IPTABLES -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT
	$IPTABLES -A OUTPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT
	$IPTABLES -A OUTPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
	
	$IPTABLESSAVE > $iptablesFile
	
	
	
	
	
	
	# Default actions
	$IP6TABLES -P INPUT DROP
	$IP6TABLES -P FORWARD DROP
	$IP6TABLES -P OUTPUT DROP
	
	# Localhost
	$IP6TABLES -A INPUT -i lo -j ACCEPT
	$IP6TABLES -A OUTPUT -o lo -j ACCEPT
	
	# Default state
	$IP6TABLES -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	$IP6TABLES -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# Open DNS
	
	$IP6TABLES -A OUTPUT -p udp --dport 53 -j ACCEPT
	$IP6TABLES -A INPUT  -p udp --sport 53 -j ACCEPT
	$IP6TABLES -A OUTPUT -p tcp --dport 53 -j ACCEPT
	$IP6TABLES -A INPUT  -p tcp --sport 53 -j ACCEPT
	
	# SSH access to server
	for ip in $SSHACCESS_IPv6; do
  		$IP6TABLES -A INPUT -p tcp --sport $SSHPORT -s $ip -j ACCEPT
  		$IP6TABLES -A OUTPUT -p tcp --dport $SSHPORT -s $ip -j ACCEPT
  	done
  
	for port in $TCPPORTS ; do
  		$IP6TABLES -A INPUT -p tcp --sport $port -j ACCEPT
  		$IP6TABLES -A OUTPUT -p tcp --dport $port -j ACCEPT
  	done
 
	for port in $UDPPORTS ; do
		$IP6TABLES -A INPUT -p udp --sport $port -j ACCEPT
		$IP6TABLES -A OUTPUT -p udp --dport $port -j ACCEPT
	done
	
	for ip in $DMZS_IPv6 ; do
		$IP6TABLES -A INPUT -m iprange --src-range $ip -j ACCEPT
		$IP6TABLES -A OUTPUT -m iprange --dst-range $ip -j ACCEPT
	done
	
	for ip in $BLACKLIST_IPv6 ; do
    	$IP6TABLES -A INPUT -s $ip -j DROP
    	$IP6TABLES -A OUTPUT -s $ip -j DROP
    done
	
	# Multicast
	if [ "$MULTICAST_ENABLE" == "TRUE" ]; then
		$IP6TABLES -A INPUT -m pkttype --pkt-type multicast -j ACCEPT
		$IP6TABLES -A INPUT -m pkttype --pkt-type broadcast -j ACCEPT
		$IP6TABLES -A OUTPUT -m pkttype --pkt-type multicast -j ACCEPT
		$IP6TABLES -A OUTPUT -m pkttype --pkt-type broadcast -j ACCEPT
	fi
	
	# OPEN SMTP with spam protection
	$IP6TABLES -A OUTPUT -d ::1 -p tcp -m tcp --dport 25 -j ACCEPT
	$IP6TABLES -A OUTPUT -p tcp -m tcp --dport 25 -m limit --limit 10/sec -m owner --gid-owner mail -j ACCEPT
	$IP6TABLES -A OUTPUT -p tcp -m tcp --dport 25 -m limit --limit 10/sec -m owner --gid-owner postfix -j ACCEPT
	$IP6TABLES -A OUTPUT -p tcp -m tcp --dport 25 -m limit --limit 10/sec -m owner --uid-owner root -j ACCEPT
	
	$IP6TABLESSAVE > $ip6tablesFile

    echo ""
    echo ""
}

case "$1" in
  start)
    echo "Starting firewall..."
    setup
    ;;
  stop)
    echo "Stopping firewall..."
    purge
    ;;
  restart)
    echo "Stopping firewall..."
    purge
    setup
    ;;
  status)
    iptables -n -L
    ip6tables -n -L
    ;;
  *)
    echo "Usage: $0 <start|stop|restart|status>"
    ;;
esac